<Window x:Class="screenerWpf.ImageEditorWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:screenerWpf"
        mc:Ignorable="d"
        Title="Image Editor" Height="600" Width="920"
        Background="#1E1E1E"
        WindowStyle="None" AllowsTransparency="True">

    <Window.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <Style x:Key="LabelStyle" TargetType="Label">
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Background" Value="#2D2D30"/>
            <Setter Property="Padding" Value="5"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Margin" Value="5"/>
        </Style>

        <!-- Definicja stylu RoundedButtonStyle -->
        <Style x:Key="RoundedButtonStyle" TargetType="Button">
            <Setter Property="Margin" Value="10"/>
            <Setter Property="Background" Value="#3E3E42"/>
            <Setter Property="BorderBrush" Value="#007ACC"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Height" Value="30"/>
            <Setter Property="Width" Value="120"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="border"
                             Background="{TemplateBinding Background}"
                             BorderBrush="{TemplateBinding BorderBrush}"
                             BorderThickness="{TemplateBinding BorderThickness}"
                             CornerRadius="10">
                            <ContentPresenter HorizontalAlignment="Center"
                               VerticalAlignment="Center"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="border" Property="Background" Value="#505962"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="border" Property="Background" Value="#70787C"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="CustomComboBoxStyle" TargetType="ComboBox">
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Background" Value="#2D2D30"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Padding" Value="5"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Margin" Value="5"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBox}">
                        <Grid>
                            <ToggleButton Background="{TemplateBinding Background}"
                                  BorderBrush="{TemplateBinding BorderBrush}"
                                  IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                      Margin="{TemplateBinding Padding}"
                                      Content="{TemplateBinding SelectionBoxItem}"
                                      ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                      ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                      IsHitTestVisible="False"/>
                            <Popup IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                           Placement="Bottom"
                           AllowsTransparency="True"
                           Focusable="False"
                           PopupAnimation="Slide">
                                <Border Background="#2D2D30" Padding="5">
                                    <ScrollViewer>
                                        <ItemsPresenter/>
                                    </ScrollViewer>
                                </Border>
                            </Popup>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="30"/>
            <!-- Pasek tytułu -->
            <RowDefinition Height="50"/>
            <!-- Przestrzeń dla StackPanel -->
            <RowDefinition Height="*"/>
            <!-- Główna zawartość -->
            <RowDefinition Height="Auto"/>
            <!-- Dolny pasek -->
        </Grid.RowDefinitions>
        <!-- Niestandardowy pasek tytułu -->
        <Border Grid.Row="0" Grid.ColumnSpan="2" Background="#2D2D30" Height="30" VerticalAlignment="Top"        MouseDown="TitleBar_MouseDown">
                        <StackPanel HorizontalAlignment="Right" Orientation="Horizontal">
                <Button Content="_" Click="MinimizeButton_Click" Width="30" Background="#FF303030" Foreground="White"/>
                <Button Content="[]" Click="MaximizeRestoreButton_Click" Width="30" Background="#FF303030" Foreground="White"/>
                <Button Content="X" Click="CloseButton_Click" Width="30" Background="#FF303030" Foreground="White"/>
            </StackPanel>
        </Border>
        <!-- PRZYCISKI 
 -->

        <StackPanel Grid.Row="2" Grid.Column="0" Orientation="Vertical" HorizontalAlignment="Center">
            <Button Content="Save" Command="{Binding SaveCommand}" Style="{DynamicResource RoundedButtonStyle}" />
            <Button Content="Draw Arrow" Command="{Binding DrawArrowCommand}" Style="{DynamicResource RoundedButtonStyle}"/>
            <Button Content="Add Text" Command="{Binding AddTextCommand}" Style="{DynamicResource RoundedButtonStyle}"/>
            <Button Content="Draw Rect" Command="{Binding DrawRectCommand}" Style="{DynamicResource RoundedButtonStyle}"/>
            <Button Content="Blur" Command="{Binding BlurCommand}" Style="{DynamicResource RoundedButtonStyle}"/>
            <Button Content="Speech Bubble" Command="{Binding SpeechBubbleCommand}" Style="{DynamicResource RoundedButtonStyle}"/>
            <Button Content="Brush" Command="{Binding BrushCommand}" Style="{DynamicResource RoundedButtonStyle}"/>
            <Button Content="Recognize Text" Command="{Binding RecognizeTextCommand}" Style="{DynamicResource RoundedButtonStyle}"/>
        </StackPanel>

        <!-- Horizontal StackPanel for ComboBoxes and Labels -->
        <StackPanel Grid.Row="1" Grid.Column="1" Orientation="Horizontal" HorizontalAlignment="Right" Background="#2D2D30">
            <Label Content="Color:" Style="{StaticResource LabelStyle}"
           Visibility="{Binding IsColorVisible, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            <ComboBox Style="{StaticResource CustomComboBoxStyle}"
              Visibility="{Binding IsColorVisible, Converter={StaticResource BooleanToVisibilityConverter}}"
              ItemsSource="{Binding Colors}"
              DisplayMemberPath="Name"
              SelectedItem="{Binding SelectedColor, Mode=TwoWay}"/>

            <Label Content="Thickness:" Style="{StaticResource LabelStyle}"
           Visibility="{Binding IsThicknessVisible, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            <ComboBox Style="{StaticResource CustomComboBoxStyle}"
              Visibility="{Binding IsThicknessVisible, Converter={StaticResource BooleanToVisibilityConverter}}"
              ItemsSource="{Binding Thicknesses}"
              SelectedItem="{Binding SelectedThickness, Mode=TwoWay}"/>

            <Label Content="Font Family:" Style="{StaticResource LabelStyle}"
           Visibility="{Binding IsFontFamilyVisible, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            <ComboBox Style="{StaticResource CustomComboBoxStyle}"
              Visibility="{Binding IsFontFamilyVisible, Converter={StaticResource BooleanToVisibilityConverter}}"
              ItemsSource="{Binding FontFamilies}"
              SelectedItem="{Binding SelectedFontFamily, Mode=TwoWay}"/>

            <Label Content="Font Size:" Style="{StaticResource LabelStyle}"
           Visibility="{Binding IsFontSizeVisible, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            <ComboBox Style="{StaticResource CustomComboBoxStyle}"
              Visibility="{Binding IsFontSizeVisible, Converter={StaticResource BooleanToVisibilityConverter}}"
              ItemsSource="{Binding FontSizes}"
              SelectedItem="{Binding SelectedFontSize, Mode=TwoWay}"/>

            <Label Content="Transparency:" Style="{StaticResource LabelStyle}"
           Visibility="{Binding IsTransparencyVisible, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            <ComboBox Style="{StaticResource CustomComboBoxStyle}"
              Visibility="{Binding IsTransparencyVisible, Converter={StaticResource BooleanToVisibilityConverter}}"
              ItemsSource="{Binding TransparencySizes}"
              SelectedItem="{Binding SelectedTransparency, Mode=TwoWay}"/>
        </StackPanel>


        <!-- ViewBox for DrawableCanvas -->
        <Border Grid.Row="2" Grid.Column="1" BorderBrush="#FF3E3E42" BorderThickness="1">
            <Viewbox Stretch="Uniform">
                <local:DrawableCanvas
                    x:Name="drawableCanvas" 
                    Focusable="True"
                    MouseLeftButtonDown="Canvas_MouseLeftButtonDown"
                    MouseLeftButtonUp="Canvas_MouseLeftButtonUp"
                    MouseMove="Canvas_MouseMove">
                    <local:DrawableCanvas.Background>
                        <ImageBrush 
                            ImageSource="{Binding initialImage, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ImageEditorWindow}}}" 
                            Stretch="Uniform"/>
                    </local:DrawableCanvas.Background>
                    <ItemsControl ItemsSource="{Binding Elements}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <Canvas IsItemsHost="True" />
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemContainerStyle>
                            <Style TargetType="{x:Type FrameworkElement}">
                                <Setter 
                                    Property="Canvas.Left"
                                    Value="{Binding Position.X}" />
                                <Setter 
                                    Property="Canvas.Top" 
                                    Value="{Binding Position.Y}" />
                            </Style>
                        </ItemsControl.ItemContainerStyle>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <!-- Definicja wyglądu dla IDrawable (możesz wymagać szczegółowej konfiguracji w zależności od Twoich klas) -->
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </local:DrawableCanvas>
            </Viewbox>
        </Border>
    </Grid>
</Window>