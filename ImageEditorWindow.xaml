<Window x:Class="screenerWpf.ImageEditorWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:screenerWpf"
        mc:Ignorable="d"
        Title="Image Editor" Height="600" Width="920"
        Background="#1E1E1E">

    <Window.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <Style x:Key="LabelStyle" TargetType="Label">
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Background" Value="#2D2D30"/>
            <Setter Property="Padding" Value="5"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Margin" Value="5"/>
        </Style>

            <!-- Definicja stylu RoundedButtonStyle -->
            <Style x:Key="RoundedButtonStyle" TargetType="Button">
                <Setter Property="Margin" Value="10"/>
                <Setter Property="Background" Value="#3E3E42"/>
                <Setter Property="BorderBrush" Value="#007ACC"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="Height" Value="30"/>
                <Setter Property="Width" Value="120"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="10">
                                <ContentPresenter HorizontalAlignment="Center"
                                          VerticalAlignment="Center"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="border" Property="Background" Value="#505962"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="border" Property="Background" Value="#70787C"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

        <Style x:Key="CustomComboBoxStyle" TargetType="ComboBox">
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Background" Value="#2D2D30"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Padding" Value="5"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Margin" Value="5"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBox}">
                        <Grid>
                            <ToggleButton Background="{TemplateBinding Background}"
                                  BorderBrush="{TemplateBinding BorderBrush}"
                                  IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                      Margin="{TemplateBinding Padding}"
                                      Content="{TemplateBinding SelectionBoxItem}"
                                      ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                      ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                      IsHitTestVisible="False"/>
                            <Popup IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                           Placement="Bottom"
                           AllowsTransparency="True"
                           Focusable="False"
                           PopupAnimation="Slide">
                                <Border Background="#2D2D30" Padding="5">
                                    <ScrollViewer>
                                        <ItemsPresenter/>
                                    </ScrollViewer>
                                </Border>
                            </Popup>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <StackPanel
            Grid.Column="0"
            Grid.Row="0"
            Grid.RowSpan="3"
            Background="#2D2D30"
            Orientation="Vertical"
            HorizontalAlignment="Center">
            <Button Content="Save" Click="SaveButton_Click" Style="{DynamicResource RoundedButtonStyle}"/>
            <Button Content="Draw Arrow" Click="DrawArrowButton_Click" Style="{DynamicResource RoundedButtonStyle}"/>
            <Button Content="Add Text" Click="AddTextButton_Click" Style="{DynamicResource RoundedButtonStyle}"/>
            <Button Content="Draw Rect" Click="DrawRectButton_Click" Style="{DynamicResource RoundedButtonStyle}"/>
            <Button Content="Blur" Click="BlurButton_Click" Style="{DynamicResource RoundedButtonStyle}"/>
            <Button Content="Speech Bubble" Click="SpeechBubbleButton_Click" Style="{DynamicResource RoundedButtonStyle}"/>
            <Button Content="Brush" Click="BrushButton_Click" Style="{DynamicResource RoundedButtonStyle}"/>
            <Button Content="Recognize Text" Click="RecognizeTextButton_Click" Style="{DynamicResource RoundedButtonStyle}"/>
        </StackPanel>
        <!-- Horizontal StackPanel for ComboBoxes and Labels -->
        <StackPanel Grid.Column="1" Grid.Row="0" Orientation="Horizontal" HorizontalAlignment="Right" Background="#2D2D30">
            <Label x:Name="colorLabel" Content="Color:" Style="{StaticResource LabelStyle}" Visibility="Collapsed"/>
            <ComboBox x:Name="colorComboBox" SelectionChanged="ColorComboBox_SelectionChanged" Style="{StaticResource CustomComboBoxStyle}" Visibility="Collapsed">
                <ComboBoxItem Content="Czarny" Background="Black"/>
                <ComboBoxItem Content="Czerwony" Background="Red"/>
                <ComboBoxItem Content="Zielony" Background="Green"/>
                <ComboBoxItem Content="Niebieski" Background="Blue"/>
            </ComboBox>
            <Label x:Name="thicknessLabel" Content="Thickness:" Style="{StaticResource LabelStyle}" Visibility="Collapsed"/>
            <ComboBox x:Name="arrowThicknessComboBox" SelectionChanged="ArrowThicknessComboBox_SelectionChanged" Style="{StaticResource CustomComboBoxStyle}" Visibility="Collapsed">
                <ComboBoxItem Content="1"/>
                <ComboBoxItem Content="2"/>
                <ComboBoxItem Content="3"/>
                <ComboBoxItem Content="4"/>
                <ComboBoxItem Content="5"/>
                <ComboBoxItem Content="6"/>
                <ComboBoxItem Content="7"/>
                <ComboBoxItem Content="8"/>
                <ComboBoxItem Content="9"/>
                <ComboBoxItem Content="10"/>
            </ComboBox>
            <Label x:Name="fontFamilyLabel" Content="Font Family:" Style="{StaticResource LabelStyle}" Visibility="Collapsed"/>
            <ComboBox x:Name="fontFamilyComboBox" SelectionChanged="FontFamilyComboBox_SelectionChanged" Style="{StaticResource CustomComboBoxStyle}" Visibility="Collapsed"/>
            <Label x:Name="fontSizeLabel" Content="Font Size:" Style="{StaticResource LabelStyle}" Visibility="Collapsed"/>
            <ComboBox x:Name="fontSizeComboBox" SelectionChanged="FontSizeComboBox_SelectionChanged" Style="{StaticResource CustomComboBoxStyle}" Visibility="Collapsed"/>
            <Label x:Name="transparencyLabel" Content="Transparency:" Style="{StaticResource LabelStyle}" Visibility="Collapsed"/>
            <ComboBox x:Name="transparencyComboBox" SelectionChanged="TransparencyComboBox_SelectionChanged" Style="{StaticResource CustomComboBoxStyle}" Visibility="Collapsed"/>
        </StackPanel>

        <!-- ViewBox for DrawableCanvas -->
        <Border Grid.Column="1" Grid.Row="1" BorderBrush="Black" BorderThickness="1">
            <Viewbox Stretch="Uniform">
                <local:DrawableCanvas
                    x:Name="drawableCanvas" 
                    Focusable="True"
                    MouseLeftButtonDown="Canvas_MouseLeftButtonDown"
                    MouseLeftButtonUp="Canvas_MouseLeftButtonUp"
                    MouseMove="Canvas_MouseMove">
                    <local:DrawableCanvas.Background>
                        <ImageBrush 
                            ImageSource="{Binding initialImage, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ImageEditorWindow}}}" 
                            Stretch="Uniform"/>
                    </local:DrawableCanvas.Background>
                    <ItemsControl ItemsSource="{Binding Elements}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <Canvas IsItemsHost="True" />
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemContainerStyle>
                            <Style TargetType="{x:Type FrameworkElement}">
                                <Setter 
                                    Property="Canvas.Left"
                                    Value="{Binding Position.X}" />
                                <Setter 
                                    Property="Canvas.Top" 
                                    Value="{Binding Position.Y}" />
                            </Style>
                        </ItemsControl.ItemContainerStyle>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <!-- Definicja wyglądu dla IDrawable (możesz wymagać szczegółowej konfiguracji w zależności od Twoich klas) -->
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </local:DrawableCanvas>
            </Viewbox>
        </Border>
        <StackPanel 
            Grid.Column="1" 
            Grid.Row="2"
            HorizontalAlignment="Right"
            VerticalAlignment="Bottom"
            Background="#2D2D30">
            <Button 
                Content="Save" 
                Click="SaveButton_Click" 
                Style="{StaticResource RoundedButtonStyle}"/>
        </StackPanel>
    </Grid>
</Window>