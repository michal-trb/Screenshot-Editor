<Window x:Class="screenerWpf.ImageEditorWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:screenerWpf"
        mc:Ignorable="d"
        Title="Image Editor" Height="450" Width="800">

    <Window.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    </Window.Resources>
    <Window.DataContext>
        <Binding RelativeSource="{RelativeSource Self}"/>
    </Window.DataContext>
    <Window.CommandBindings>
        <CommandBinding Command="ApplicationCommands.Delete" Executed="CommandBinding_DeleteExecuted" />
    </Window.CommandBindings>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <ToolBar Grid.Row="0">
            <!-- ToolBar for editor commands like save, draw arrow, add text, etc. -->
            <Button Content="Save" Click="SaveButton_Click"/>
            <Button Content="Draw Arrow" Click="DrawArrowButton_Click"/>
            <Button Content="Add Text" Click="AddTextButton_Click"/>
            <!-- Nowe kontrolki do wyboru właściwości strzałki -->
            <Separator Visibility="{Binding IsArrowToolSelected, Converter={StaticResource BooleanToVisibilityConverter}}" />
            <Label Content="Kolor:" Visibility="{Binding IsDrawArrowSelected, Converter={StaticResource BooleanToVisibilityConverter}}" />
            <ComboBox x:Name="arrowColorComboBox" SelectionChanged="ArrowColorComboBox_SelectionChanged" Visibility="{Binding IsDrawArrowSelected, Converter={StaticResource BooleanToVisibilityConverter}}">
                <ComboBoxItem Content="Czarny" Background="Black"/>
                <ComboBoxItem Content="Czerwony" Background="Red"/>
                <ComboBoxItem Content="Zielony" Background="Green"/>
                <ComboBoxItem Content="Niebieski" Background="Blue"/>
                <!-- Dodaj więcej kolorów według potrzeb -->
            </ComboBox>
            <Label Content="Grubość:" Visibility="{Binding IsDrawArrowSelected, Converter={StaticResource BooleanToVisibilityConverter}}" />
            <ComboBox x:Name="arrowThicknessComboBox" SelectionChanged="ArrowThicknessComboBox_SelectionChanged" Visibility="{Binding IsDrawArrowSelected, Converter={StaticResource BooleanToVisibilityConverter}}">
            <ComboBoxItem Content="1"/>
                <ComboBoxItem Content="2"/>
                <ComboBoxItem Content="3"/>
                <ComboBoxItem Content="4"/>
                <ComboBoxItem Content="5"/>
                <ComboBoxItem Content="6"/>
                <ComboBoxItem Content="7"/>
                <ComboBoxItem Content="8"/>
                <ComboBoxItem Content="9"/>
                <ComboBoxItem Content="10"/>
                <!-- Dodaj więcej opcji grubości, jeśli potrzebujesz -->
            </ComboBox>
        </ToolBar>
        <Viewbox Grid.Row="1" Stretch="Uniform">
            <local:DrawableCanvas x:Name="drawableCanvas" Focusable="True" MouseLeftButtonDown="Canvas_MouseLeftButtonDown" MouseLeftButtonUp="Canvas_MouseLeftButtonUp" MouseMove="Canvas_MouseMove">
                <local:DrawableCanvas.Background>
                    <ImageBrush ImageSource="{Binding initialImage, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ImageEditorWindow}}}" Stretch="Uniform" />
                </local:DrawableCanvas.Background>

                <ItemsControl ItemsSource="{Binding Elements}">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <Canvas IsItemsHost="True" />
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemContainerStyle>
                        <Style TargetType="{x:Type FrameworkElement}">
                            <Setter Property="Canvas.Left" Value="{Binding Position.X}" />
                            <Setter Property="Canvas.Top" Value="{Binding Position.Y}" />
                        </Style>
                    </ItemsControl.ItemContainerStyle>
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <!-- Definicja wyglądu dla IDrawable (możesz wymagać szczegółowej konfiguracji w zależności od Twoich klas) -->
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </local:DrawableCanvas>
        </Viewbox>
    </Grid>
</Window>
